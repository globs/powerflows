version: '3.7'

services:

  postgres-datalab:
    container_name: ${pg_container_name}
    hostname: ${pg_hostname}
    image: docker.io/library/postgres:14
    restart: always
    environment:
      POSTGRES_USER: ${pg_POSTGRES_USER}
      POSTGRES_PASSWORD: ${pg_POSTGRES_PASSWORD}
    ports:
      - ${pg_ports1}
    networks:
      - ${global_services_network}
    volumes:
      - ${pg_volumes1}


  db2-datalab:
    container_name: ${db2_container_name}
    hostname: ${db2_hostname}
    image: docker.io/ibmcom/db2
    privileged: true
    restart: always
    environment:
      DB2INST1_PASSWORD: ${db2_DB2INST1_PASSWORD}
      LICENSE: ${db2_LICENSE}
      DBNAME: ${db2_DBNAME}
    ports:
      - ${db2_ports}
    networks:
      - ${global_services_network}
    volumes:
      - ${db2_volumes1}

  minio-datalab:
    container_name: ${minio_container_name}
    hostname: ${minio_hostname}
    image: quay.io/minio/minio
    restart: always
    environment:
      MINIO_ROOT_USER: ${minio_MINIO_ROOT_USER}
      MINIO_ROOT_PASSWORD: ${minio_MINIO_ROOT_PASSWORD}
    ports:
      - ${minio_ports1}
      - ${minio_ports2}
    networks:
      - ${global_services_network}
    volumes:
      - ${minio_volumes1}
    command: ${minio_command1}


  neo4j-datalab:
    container_name: ${neo_4j_container_name}
    hostname: ${neo_4j_hostname}
    image: docker.io/neo4j:latest
    restart: always
    environment:
      NEO4J_AUTH: ${neo_4j_NEO4J_AUTH}
    ports:
      - ${neo_4j_ports1}
      - ${neo_4j_ports2}
    networks:
      - ${global_services_network}
    volumes:
      - ${noe4j_volumes1}
      - ${noe4j_volumes2}
      - ${noe4j_volumes3}
      - ${noe4j_volumes4}

  restapi-datalab:
    container_name: ${api_container_name}
    hostname: ${api_hostname}
    build:
      context: ${api_context}
      dockerfile: ${api_dockerfile}
    restart: always
    env_file:
      - ${api_env_file}
    ports:
      - ${api_ports1}
    networks:
      - ${global_services_network}
    depends_on:
      - "db2-datalab"
      - "minio-datalab"
      - "postgres-datalab"
    command: ${api_command1}

#monitoring services
  prom_exporter_db2:
    container_name: ${promexp_db2_container_name}
    hostname: ${promexp_db2_hostname}
    build:
      context: ${promexp_db2_context}
      dockerfile: ${promexp_db2_dockerfile}
    restart: always
    ports:
      - ${promexp_db2_ports1}
    networks:
      - ${global_services_network}
    depends_on:
      - "db2-datalab"


  prom_exporter_pg:
    container_name: ${promexp_pg_container_name}
    hostname: ${promexp_pg_hostname}
    image: quay.io/prometheuscommunity/postgres-exporter
    restart: always
    environment:
      DATA_SOURCE_NAME: ${promexp_pg_DATA_SOURCE_NAME}
    ports:
      - ${promexp_pg_ports1}
    networks:
      - ${global_services_network}
    depends_on:
      - "postgres-datalab"

  prom_exporter_node:
    container_name: ${promexp_node_container_name}
    hostname: ${promexp_node_hostname}
    image: docker.io/prom/node-exporter:latest
    restart: always
    volumes:
    - ${promexp_node_volumes1}
    - ${promexp_node_volumes2}
    - ${promexp_node_volumes3}
    command:
      - ${promexp_node_command1}
      - ${promexp_node_command2}
      - ${promexp_node_command3}
      - ${promexp_node_command4}
    ports:
      - ${promexp_node_ports}
    networks:
      - ${global_services_network}


  promserver-datalab:
    container_name: ${promserver_container_name}
    hostname: ${promserver_hostname}
    image: docker.io/prom/prometheus
    restart: always
    ports:
      - ${promserver_ports}
    networks:
      - ${global_services_network}
    volumes:
      - ${promserver_volume1}
#    command:
#      - '--config.file=/etc/prometheus/prometheus.yml  --log.level=debug'


  grafana-datalab:
    container_name: ${grafana_container_name}
    hostname: ${grafana_hostname}
    image: docker.io/grafana/grafana
    restart: always
    ports:
      - ${grafana_ports}
    networks:
      - ${global_services_network}
    volumes:
      - ${grafana_volumes1}

#delta lakehouse services
  airflow:
    build: ${airflow_build}
    restart: unless-stopped
    environment:
      - AIRFLOW__CORE__FERNET_KEY=${airflow_AIRFLOW__CORE__FERNET_KEY}
      - AIRFLOW_HOME=${airflow_AIRFLOW_HOME}
    ports:
      - ${airflow_ports1}
    volumes:
      - ${airflow_volumes}
    command: ${airflow_command}

  spark-master:
    build: ${spark_m_build}
    restart: unless-stopped
    ports:
      - ${spark_m_ports1}
      - ${spark_m_ports2}
      - ${spark_m_ports3}
      - ${spark_m_ports4}
    command: ${spark_m_command}

  spark-worker:
    build: ${spark_w_build}
    restart: unless-stopped
    ports:
      - ${spark_w_ports1}
    command: ${spark_w_command}

  presto:
    build: ${presto_build}
    ports:
      - ${presto_ports1}
    volumes:
      - ${presto_volumes1}
      - ${presto_volumes2}

  presto-worker:
    build: ${presto_w_build}
    volumes:
      - ${presto_w_volumes1}
      - ${presto_w_volumes2}

  superset:
    image: arezamoosavi/superset:latest
    container_name: ${superset_container_name}
    environment:
      ADMIN_USERNAME: ${superset_ADMIN_USERNAME}
      ADMIN_PWD: ${superset_ADMIN_PWD}
    ports:
      - ${superset_ports1}
    volumes:
      - ${superset_volumes1}
    restart: unless-stopped




networks:
  datalab-network:
    driver: bridge